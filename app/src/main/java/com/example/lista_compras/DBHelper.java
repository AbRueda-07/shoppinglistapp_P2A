package com.example.lista_compras;import android.content.ContentValues;import android.content.Context;import android.database.Cursor;import android.database.sqlite.SQLiteDatabase;import android.database.sqlite.SQLiteOpenHelper;import android.util.Log;import java.util.ArrayList;public class DBHelper extends SQLiteOpenHelper {    private static final String DB_NAME = "shopping.db";    private static final int DB_VERSION = 1;    private static final String TABLE = "products";    private static final String TAG = "DBHelper";    public DBHelper(Context context) {        super(context, DB_NAME, null, DB_VERSION);    }    @Override    public void onCreate(SQLiteDatabase db) {        String createTable = "CREATE TABLE " + TABLE + " (" +                "id INTEGER PRIMARY KEY AUTOINCREMENT, " +                "name TEXT NOT NULL, " +                "status TEXT NOT NULL, " +                "date TEXT NOT NULL" +                ")";        db.execSQL(createTable);        Log.d("DBHelper", "Tabla creada: " + createTable);    }    @Override    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {        Log.w(TAG, "Actualizando base de datos de versión " + oldVersion + " a " + newVersion);        db.execSQL("DROP TABLE IF EXISTS " + TABLE);        onCreate(db);    }    // ------------------- INSERT -------------------    public long addProduct(Product p) {        if (p == null) {            Log.e("DBHelper", "Producto es null");            return -1;        }        SQLiteDatabase db = null;        try {            db = getWritableDatabase();            ContentValues v = new ContentValues();            v.put("name", p.getName());            v.put("status", p.getStatus());            v.put("date", p.getDate());            long id = db.insert(TABLE, null, v);            Log.d("DBHelper", "Producto agregado con ID: " + id + ", Nombre: " + p.getName());            return id;        } catch (Exception e) {            Log.e("DBHelper", "Error agregando producto: " + e.getMessage());            return -1;        } finally {            if (db != null) {                db.close();            }        }    }    // ------------------- SELECT (UNO) -------------------    public Product getProductById(int id) {        if (id <= 0) {            Log.w(TAG, "ID inválido: " + id);            return null;        }        SQLiteDatabase db = null;        Cursor c = null;        try {            db = getReadableDatabase();            c = db.query(TABLE, null, "id=?", new String[]{String.valueOf(id)}, null, null, null);            Product p = null;            if (c != null && c.moveToFirst()) {                // Usar getColumnIndex en lugar de getColumnIndexOrThrow para evitar crashes                int nameIndex = c.getColumnIndex("name");                int statusIndex = c.getColumnIndex("status");                int dateIndex = c.getColumnIndex("date");                if (nameIndex != -1 && statusIndex != -1 && dateIndex != -1) {                    String name = c.getString(nameIndex);                    String status = c.getString(statusIndex);                    String date = c.getString(dateIndex);                    p = new Product(id, name, status, date);                    Log.d(TAG, "Producto encontrado: " + name);                }            }            return p;        } catch (Exception e) {            Log.e(TAG, "Error obteniendo producto por ID: " + e.getMessage());            return null;        } finally {            if (c != null) c.close();            if (db != null) db.close();        }    }    // ------------------- SELECT (CON FILTROS) -------------------    public ArrayList<Product> getProducts(String estadoFilter, String fechaFilter) {        ArrayList<Product> list = new ArrayList<>();        SQLiteDatabase db = null;        Cursor c = null;        try {            db = getReadableDatabase();            String selection = null;            ArrayList<String> argsList = new ArrayList<>();            if (estadoFilter != null && !estadoFilter.isEmpty() && !estadoFilter.equals("Todo")) {                selection = "status=?";                argsList.add(estadoFilter);            }            if (fechaFilter != null && !fechaFilter.isEmpty()) {                if (selection != null) {                    selection += " AND date LIKE ?";                } else {                    selection = "date LIKE ?";                }                argsList.add(fechaFilter + "%");            }            String[] selectionArgs = argsList.isEmpty() ? null : argsList.toArray(new String[0]);            c = db.query(TABLE, null, selection, selectionArgs, null, null, "date DESC");            if (c != null) {                int idIndex = c.getColumnIndex("id");                int nameIndex = c.getColumnIndex("name");                int statusIndex = c.getColumnIndex("status");                int dateIndex = c.getColumnIndex("date");                while (c.moveToNext()) {                    if (idIndex != -1 && nameIndex != -1 && statusIndex != -1 && dateIndex != -1) {                        int pid = c.getInt(idIndex);                        String name = c.getString(nameIndex);                        String status = c.getString(statusIndex);                        String date = c.getString(dateIndex);                        list.add(new Product(pid, name, status, date));                    }                }            }        } catch (Exception e) {            Log.e(TAG, "Error obteniendo productos: " + e.getMessage());        } finally {            if (c != null) c.close();            if (db != null) db.close();        }        return list;    }    // ------------------- SELECT (TODOS SIN FILTRO) -------------------    public ArrayList<Product> getAllProducts() {        ArrayList<Product> list = new ArrayList<>();        SQLiteDatabase db = null;        Cursor c = null;        try {            db = getReadableDatabase();            c = db.query(TABLE, null, null, null, null, null, "date DESC");            if (c != null) {                int idIndex = c.getColumnIndex("id");                int nameIndex = c.getColumnIndex("name");                int statusIndex = c.getColumnIndex("status");                int dateIndex = c.getColumnIndex("date");                while (c.moveToNext()) {                    if (idIndex != -1 && nameIndex != -1 && statusIndex != -1 && dateIndex != -1) {                        int pid = c.getInt(idIndex);                        String name = c.getString(nameIndex);                        String status = c.getString(statusIndex);                        String date = c.getString(dateIndex);                        list.add(new Product(pid, name, status, date));                    }                }            }        } catch (Exception e) {            Log.e(TAG, "Error obteniendo todos los productos: " + e.getMessage());        } finally {            if (c != null) c.close();            if (db != null) db.close();        }        return list;    }    // ------------------- UPDATE -------------------    public int updateProductStatus(int id, String newStatus) {        if (id <= 0 || newStatus == null || newStatus.isEmpty()) {            Log.w(TAG, "Parámetros inválidos para actualizar estado");            return 0;        }        SQLiteDatabase db = null;        try {            db = getWritableDatabase();            ContentValues v = new ContentValues();            v.put("status", newStatus);            int rows = db.update(TABLE, v, "id=?", new String[]{String.valueOf(id)});            Log.d(TAG, "Estado actualizado para producto ID " + id + ". Filas afectadas: " + rows);            return rows;        } catch (Exception e) {            Log.e(TAG, "Error actualizando estado: " + e.getMessage());            return 0;        } finally {            if (db != null) db.close();        }    }    public int updateProduct(int id, String name, String status) {        if (id <= 0 || name == null || name.isEmpty() || status == null || status.isEmpty()) {            Log.w(TAG, "Parámetros inválidos para actualizar producto");            return 0;        }        SQLiteDatabase db = null;        try {            db = getWritableDatabase();            ContentValues v = new ContentValues();            v.put("name", name);            v.put("status", status);            int rows = db.update(TABLE, v, "id=?", new String[]{String.valueOf(id)});            Log.d(TAG, "Producto actualizado ID " + id + ". Filas afectadas: " + rows);            return rows;        } catch (Exception e) {            Log.e(TAG, "Error actualizando producto: " + e.getMessage());            return 0;        } finally {            if (db != null) db.close();        }    }    // ------------------- DELETE -------------------    public int deleteProduct(int id) {        if (id <= 0) {            Log.w(TAG, "ID inválido para eliminar: " + id);            return 0;        }        SQLiteDatabase db = null;        try {            db = getWritableDatabase();            int rows = db.delete(TABLE, "id=?", new String[]{String.valueOf(id)});            Log.d(TAG, "Producto eliminado ID " + id + ". Filas afectadas: " + rows);            return rows;        } catch (Exception e) {            Log.e(TAG, "Error eliminando producto: " + e.getMessage());            return 0;        } finally {            if (db != null) db.close();        }    }    public void clearTable() {        SQLiteDatabase db = null;        try {            db = getWritableDatabase();            db.delete(TABLE, null, null);            Log.d(TAG, "Tabla limpiada");        } catch (Exception e) {            Log.e(TAG, "Error limpiando tabla: " + e.getMessage());        } finally {            if (db != null) db.close();        }    }    // ------------------- CONTADORES -------------------    public int countTotal(String estadoFilter, String fechaFilter) {        SQLiteDatabase db = null;        Cursor c = null;        try {            db = getReadableDatabase();            String selection = null;            ArrayList<String> argsList = new ArrayList<>();            // Si se especifica un estado específico (no "Todo"), filtrar por él            if (estadoFilter != null && !estadoFilter.isEmpty() && !estadoFilter.equals("Todo")) {                selection = "status=?";                argsList.add(estadoFilter);            }            if (fechaFilter != null && !fechaFilter.isEmpty()) {                if (selection != null) {                    selection += " AND date LIKE ?";                } else {                    selection = "date LIKE ?";                }                argsList.add(fechaFilter + "%");            }            String[] selectionArgs = argsList.isEmpty() ? null : argsList.toArray(new String[0]);            c = db.query(TABLE, new String[]{"COUNT(*) as count"}, selection, selectionArgs, null, null, null);            int count = 0;            if (c != null && c.moveToFirst()) {                int countIndex = c.getColumnIndex("count");                if (countIndex != -1) {                    count = c.getInt(countIndex);                }            }            return count;        } catch (Exception e) {            Log.e(TAG, "Error contando total: " + e.getMessage());            return 0;        } finally {            if (c != null) c.close();            if (db != null) db.close();        }    }    public int countByStatus(String status, String fechaFilter) {        if (status == null || status.isEmpty()) {            Log.w(TAG, "Estado inválido para contar");            return 0;        }        SQLiteDatabase db = null;        Cursor c = null;        try {            db = getReadableDatabase();            String selection = "status=?";            ArrayList<String> argsList = new ArrayList<>();            argsList.add(status);            if (fechaFilter != null && !fechaFilter.isEmpty()) {                selection += " AND date LIKE ?";                argsList.add(fechaFilter + "%");            }            String[] selectionArgs = argsList.toArray(new String[0]);            c = db.query(TABLE, new String[]{"COUNT(*) as count"}, selection, selectionArgs, null, null, null);            int count = 0;            if (c != null && c.moveToFirst()) {                int countIndex = c.getColumnIndex("count");                if (countIndex != -1) {                    count = c.getInt(countIndex);                }            }            return count;        } catch (Exception e) {            Log.e(TAG, "Error contando por estado: " + e.getMessage());            return 0;        } finally {            if (c != null) c.close();            if (db != null) db.close();        }    }    // ------------------- EXTRA: VERIFICAR DUPLICADOS -------------------    public boolean existsProductByName(String name) {        if (name == null || name.isEmpty()) {            return false;        }        SQLiteDatabase db = null;        Cursor c = null;        try {            db = getReadableDatabase();            c = db.query(TABLE, new String[]{"id"}, "name=?", new String[]{name}, null, null, null);            boolean exists = (c != null && c.moveToFirst());            return exists;        } catch (Exception e) {            Log.e(TAG, "Error verificando existencia: " + e.getMessage());            return false;        } finally {            if (c != null) c.close();            if (db != null) db.close();        }    }}